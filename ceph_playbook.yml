- name: Compile Ceph and Verify RGW
  hosts: storage
  tasks:
    # ===================================================================
    # PART 1: COMPILATION TASKS
    # ===================================================================
    - name: Part 1 - Compilation
      tags: compile
      block:
        - name: "Ensure base packages are installed"
          become: yes
          package:
            name: ['git', 'python3']
            state: present
        - name: "Create projects directory"
          file:
            path: "{{ project_base_dir }}"
            state: directory
            mode: '0755'
        - name: "Clone Ceph repository"
          git:
            repo: "{{ ceph_repo_url }}"
            dest: "{{ ceph_src_dir }}"
            version: "{{ ceph_repo_version }}"
            force: yes
        - name: "Initialize and update Git submodules"
          command: "{{ submodule_update_cmd }}"
          args:
            chdir: "{{ ceph_src_dir }}"
            creates: "{{ ceph_src_dir }}/src/rocksdb/CMakeLists.txt"
        - name: "Install Ceph build dependencies"
          become: yes
          command: "{{ install_deps_cmd }}"
          args:
            chdir: "{{ ceph_src_dir }}"
        - name: "Configure the build with CMake"
          command: "{{ cmake_config_cmd }}"
          args:
            chdir: "{{ ceph_src_dir }}"
            creates: "{{ ceph_build_dir }}/build.ninja"
        - name: "Compile Ceph"
          command: "{{ compile_cmd }}"
          args:
            chdir: "{{ ceph_build_dir }}"
            creates: "{{ ceph_build_dir }}/bin/ceph"

    # ===================================================================
    # PART 2: VERIFICATION TASKS (CI-hardened, no objectstore_bench)
    # ===================================================================
    - name: Part 2 - Verification
      tags: verify
      block:
        # ---------- CI prerequisites (quiet, idempotent) ----------
        - name: "Ensure runtime tools are installed (awscli, curl, ninja, cmake)"
          become: yes
          package:
            name: "{{ base_packages | default(['awscli','curl','ninja-build','cmake']) }}"
            state: present
          failed_when: false
    
        - name: "Verify required tools exist"
          block:
            - command: "bash -lc 'command -v aws'"
              register: aws_cmd
              changed_when: false
              failed_when: aws_cmd.rc != 0
            - command: "bash -lc 'command -v curl'"
              register: curl_cmd
              changed_when: false
              failed_when: curl_cmd.rc != 0
    
        - name: "Build ceph-conf if needed"
          command: "make -j$(nproc) ceph-conf"
          args: { chdir: "{{ ceph_build_dir }}" }
          failed_when: false
    
        # ---------- Dev cluster bring-up FIRST ----------
        - name: "Start the vstart development cluster (with RGW)"
          shell: "{{ vstart_cmd }}"
          args: { chdir: "{{ ceph_build_dir }}" }
          register: vstart_output
          changed_when: "'done' in (vstart_output.stdout | default('')) or vstart_output.rc == 0"
          failed_when: false
    
        - name: "Wait for Ceph to reach HEALTH_OK/WARN"
          command: "./bin/ceph -c {{ ceph_conf_file }} status"
          args: { chdir: "{{ ceph_build_dir }}" }
          register: ceph_status
          until: "'HEALTH_OK' in ceph_status.stdout or 'HEALTH_WARN' in ceph_status.stdout"
          retries: 30
          delay: 6
    
        # ---------- BlueStore/IO sanity via rados bench ----------
        - name: "Ensure 'bench' pool exists (idempotent)"
          shell: |
            set -euo pipefail
            ./bin/ceph -c "{{ ceph_conf_file }}" osd pool ls | grep -qx bench || \
            ./bin/ceph -c "{{ ceph_conf_file }}" osd pool create bench 8
          args: { chdir: "{{ ceph_build_dir }}" }
          register: pool_create
          changed_when: "'pool ' in (pool_create.stdout | default(''))"
          failed_when: false
    
        - name: "Run rados bench on 'bench' pool (write)"
          shell: |
            set -euo pipefail
            ./bin/rados -c "{{ ceph_conf_file }}" -p bench bench 5 write --no-cleanup -b 4096 --threads 1
          args: { chdir: "{{ ceph_build_dir }}" }
          register: rados_bench
          failed_when: rados_bench.rc != 0
    
        # ---------- RGW user + endpoint health ----------
        - name: "Create/Update RGW demo user (uid=test)"
          shell: |
            set -euo pipefail
            ./bin/radosgw-admin -c "{{ ceph_conf_file }}" user create \
              --uid=test --display-name=test --access-key=test --secret-key=test \
            || ./bin/radosgw-admin -c "{{ ceph_conf_file }}" user modify \
              --uid=test --access-key=test --secret-key=test
          args: { chdir: "{{ ceph_build_dir }}" }
          register: rgw_user
          changed_when: "'created' in (rgw_user.stdout | default('')) or 'updated' in (rgw_user.stdout | default(''))"
          failed_when: false
    
        - name: "Wait for RGW endpoint to serve HTTP (2xx/3xx)"
          shell: "curl -s -o /dev/null -w '%{http_code}' {{ s3_endpoint }}/"
          register: rgw_health
          until: "(rgw_health.stdout | int) >= 200 and (rgw_health.stdout | int) < 400"
          retries: 40
          delay: 3
    
        # ---------- S3 ops ----------
        - name: "S3 operations (create bucket, put object, head-object)"
          block:
            - name: "Create S3 bucket (idempotent)"
              shell: |
                set -euo pipefail
                aws --endpoint-url "{{ s3_endpoint }}" s3api create-bucket \
                  --bucket "{{ s3_test_bucket }}" \
                  --region "{{ aws_region | default('us-east-1') }}" \
                  || true
              register: s3_mkbucket
              changed_when: "'Location' in (s3_mkbucket.stdout | default(''))"
              failed_when: false
    
            - name: "Create local test file for upload"
              copy:
                content: "Ceph test successful!"
                dest: "/tmp/ceph_test_file.txt"
    
            - name: "Upload object to S3"
              shell: |
                set -euo pipefail
                aws --endpoint-url "{{ s3_endpoint }}" s3 cp \
                  /tmp/ceph_test_file.txt "s3://{{ s3_test_bucket }}/{{ s3_test_object }}"
              register: s3_put
              failed_when: s3_put.rc != 0
    
            - name: "HEAD the uploaded object to verify"
              shell: |
                set -euo pipefail
                aws --endpoint-url "{{ s3_endpoint }}" s3api head-object \
                  --bucket "{{ s3_test_bucket }}" --key "{{ s3_test_object }}"
              register: s3_head
              failed_when: s3_head.rc != 0
          environment:
            AWS_ACCESS_KEY_ID: "test"
            AWS_SECRET_ACCESS_KEY: "test"
            AWS_DEFAULT_REGION: "{{ aws_region | default('us-east-1') }}"
    
        # ---------- Summary ----------
        - name: "Display verification results"
          debug:
            msg: |
              ✅ Ceph cluster: {{ 'HEALTHY' if 'HEALTH_OK' in ceph_status.stdout or 'HEALTH_WARN' in ceph_status.stdout else 'UNKNOWN' }}
              ✅ rados bench: {{ 'PASSED' if rados_bench.rc == 0 else 'FAILED' }}
              ✅ RGW endpoint: HTTP {{ rgw_health.stdout | default('N/A') }}
              ✅ S3 upload: {{ 'PASSED' if (s3_put.rc | default(1)) == 0 else 'FAILED' }}
              ✅ S3 head-object: {{ 'PASSED' if (s3_head.rc | default(1)) == 0 else 'FAILED' }}
    
      always:
        - name: "Stop the vstart cluster"
          command: "{{ stop_cmd }}"
          args: { chdir: "{{ ceph_build_dir }}" }
          failed_when: false
    
        - name: "Clean test artifacts"
          file:
            path: "{{ item }}"
            state: absent
          loop:
            - "/tmp/ceph_test_file.txt"
          failed_when: false
