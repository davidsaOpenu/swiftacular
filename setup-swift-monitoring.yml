---
- name: Setup monitoring on storage and proxy hosts
  hosts: storage,proxy
  roles:
    - role: performancecopilot.metrics.redis
    - role: performancecopilot.metrics.pcp
      vars:
        pcp_rest_api: true
        pcp_pmlogger_interval: 30

- name: Setup storage and proxy hosts so they support custom pcp pdmas
  hosts: storage, proxy
  become: true
  tasks:
    - name: Install centos-release-openstack-epoxy
      ansible.builtin.dnf:
        name: centos-release-openstack-epoxy
        state: present

    - name: Install required packages
      ansible.builtin.dnf:
        name:
          - python3-devel
          - pcp-devel
          - liberasurecode-devel
        state: present

- name: Setup swiftdbinfo pmda on storage hosts
  hosts: storage
  tasks:
    - name: Copy pdma to host
      ansible.builtin.copy:
        src: monitoring/pdmas/swiftdbinfo/
        dest: /var/lib/pcp/pmdas/swiftdbinfo/
        mode: u=rwx,g=rwx,o=rwx

    - name: Change ownership of pdma
      ansible.builtin.file:
        path: /var/lib/pcp/pmdas/swiftdbinfo
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        recurse: true

    - name: Install OpenStack Epoxy release package
      ansible.builtin.dnf:
        name: centos-release-openstack-epoxy
        state: present

    - name: Enable CRB repository for additional dependencies
      ansible.builtin.command:
        cmd: dnf config-manager --set-enabled crb
      become: true
      changed_when: false # noqa no-changed-when

    - name: Update package cache after adding repo and enabling CRB
      ansible.builtin.dnf:
        update_cache: true

    - name: Install required dependencies
      ansible.builtin.dnf:
        name:
          - python3-pyxattr
        state: present

    - name: Install OpenStack Swift
      ansible.builtin.dnf:
        name:
          - openstack-swift
          - python3-swift
        state: present

    - name: Install PDMA
      ansible.builtin.shell: |
        cd /var/lib/pcp/pmdas/swiftdbinfo
        sudo ./Install.sh
      changed_when: false # noqa no-changed-when

    - name: Enable and configure persistent logging for custom pdma
      ansible.builtin.blockinfile:
        path: /var/lib/pcp/config/pmlogger/config.default
        marker: "# {mark} ANSIBLE MANAGED BLOCK - swiftdbinfo logging"
        insertbefore: "^\\[access\\]"
        block: |
          log mandatory on every 60 seconds {
          swiftdbinfo.size
          swiftdbinfo.object.count
          swiftdbinfo.object.dist
          }
      become: true

- name: Restart pmlogger to finish PDMAS setup
  hosts: storage, proxy
  tasks:
    - name: Restart pmlogger
      ansible.builtin.systemd:
        name: pmlogger
        state: restarted
      become: true

- name: Setup Grafana
  hosts: grafana
  tasks:
    - name: Run performancecopilot.metrics roles
      block:
        - name: Run redis role
          ansible.builtin.include_role:
            name: performancecopilot.metrics.redis

        - name: Run grafana role
          ansible.builtin.include_role:
            name: performancecopilot.metrics.grafana
      rescue:
        # same task as in performancecopilot.metrics.grafana but with retries to avoid
        # intermittent failures on a congested CI server
        - name: More retries to ensure graphing service is running and enabled on boot
          ansible.builtin.service:
            name: grafana-server
            state: started
            enabled: true
          register: grafana_start
          retries: 3
          delay: 30
          until: grafana_start is succeeded

- name: Add echarts to Grafana
  hosts: grafana
  tasks:
    - name: Install echarts plugin
      ansible.builtin.command: grafana-cli plugins install volkovlabs-echarts-panel
      become: true
      changed_when: false # noqa no-changed-when

    - name: Restart grafana-server
      ansible.builtin.systemd:
        name: grafana-server
        state: restarted
      become: true

- name: Setup configure grafana python script
  hosts: grafana,storage,proxy
  become: true
  tasks:
    - name: Install development packages
      ansible.builtin.dnf:
        name:
          - python3-devel
        state: present

    - name: Create virtual environment for grafana-client
      ansible.builtin.command: python3 -m venv /opt/grafana-venv
      args:
        creates: /opt/grafana-venv

    - name: Set proper ownership for virtual environment
      ansible.builtin.file:
        path: /opt/grafana-venv
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        recurse: true

    - name: Install grafana-client in virtual environment
      ansible.builtin.pip:
        name: grafana-client
        state: present
        virtualenv: /opt/grafana-venv
        virtualenv_python: python3

    - name: Copy configure_grafana.py script to target hosts
      ansible.builtin.copy:
        src: monitoring/grafana/configure_grafana.py
        dest: /tmp/configure_grafana.py
        mode: "0755"

- name: Delete PCP Redis datasource to Grafana
  hosts: grafana
  tasks:
    - name: Run the configure_grafana.py script - delete-default-pcp-datasource
      ansible.builtin.command: >
        /opt/grafana-venv/bin/python /tmp/configure_grafana.py
        delete-default-pcp-datasource
        {{ hostvars['grafana-01']['ansible_default_ipv4']['address'] }}:3000
        admin admin
      changed_when: false # noqa no-changed-when

- name: Add PCP Redis datasource to Grafana
  hosts: storage,proxy
  tasks:
    - name: Run the configure_grafana.py script - create-pcp-datasource
      ansible.builtin.command: >
        /opt/grafana-venv/bin/python /tmp/configure_grafana.py
        create-pcp-datasource
        {{ hostvars['grafana-01']['ansible_default_ipv4']['address'] }}:3000
        admin admin
        {{ inventory_hostname }}
        {{ ansible_host }}
      changed_when: false # noqa no-changed-when
