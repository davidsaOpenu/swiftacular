---
# Apply patch to sharder.py to ensure sharding is always set to true.
# Then run workloader and verification.

- name: Sharder patch
  hosts: storage
  become: true
  tasks:
    - name: Copy the sharder patch file to the target host
      ansible.builtin.copy:
        src: sharder.patch
        dest: /tmp/sharder.patch
        mode: "0644"

    - name: Install patch package
      ansible.builtin.dnf:
        name: patch
        state: present

    - name: Check if sharder patch is already applied
      ansible.builtin.shell: |
        set -o pipefail
        patch --dry-run -p0 < /tmp/sharder.patch
      args:
        chdir: /usr/lib/python3.9/site-packages/swift/container
        executable: /bin/bash
      register: patch_check
      failed_when: false
      changed_when: false

    - name: Apply sharder patch
      ansible.builtin.shell: |
        set -o pipefail
        patch -p0 < /tmp/sharder.patch
      args:
        chdir: /usr/lib/python3.9/site-packages/swift/container
        executable: /bin/bash
      when: patch_check.rc == 0
      register: patch_output
      changed_when: "'patching file' in patch_output.stdout"

    - name: Stop sharders
      ansible.builtin.command: swift-init container-sharder stop
      register: stop_sharders
      changed_when: 
        - stop_sharders.rc == 0
        - "'stopping' in stop_sharders.stdout.lower() or 'stopped' in stop_sharders.stdout.lower()"
      failed_when: false
      become: true

    - name: Start sharders
      ansible.builtin.command: swift-init container-sharder start
      changed_when: true

- name: Workload tests
  hosts: package_cache
  become: true
  tasks:
    - name: Copy tests directory to package_cache host
      ansible.builtin.copy:
        src: workload_tests
        dest: /home/vagrant/
        mode: "0755"

    - name: Install pytest using system package manager
      ansible.builtin.dnf:
        name: python3-pytest
        state: present

    - name: Install python3-swiftclient
      ansible.builtin.dnf:
        name: python3-swiftclient
        state: present

    # We're currently only running the tiny test. It would be good to run everything!
    - name: Run workload tests
      ansible.builtin.command: /usr/bin/python -m pytest test_workload.py::test_tiny_workload -svx
      args:
        chdir: /home/vagrant/workload_tests
      register: pytest_result
      changed_when: false

- name: Verify sharding
  hosts: storage
  tasks:
    # It's entirely possible that for bigger tests, it would take much longer than 10 minutes for sharding to complete.
    - name: Wait for sharding
      ansible.builtin.wait_for:
        timeout: 600
      delegate_to: localhost

    - name: Get container sharding results
      ansible.builtin.shell: |
        set -o pipefail
        for FILE in /srv/node/td*/containers/*/*/*/*.db; do
          swift-manage-shard-ranges "$FILE" info
        done 2>&1 | grep '^Loaded.*the-test-container$' -A 20 | grep -m 1 "db_state" | sed -e "s/^db_state = //"
      args:
        executable: /bin/bash
      register: command_output
      changed_when: false

    - name: Show output
      ansible.builtin.debug:
        var: command_output.stdout

    - name: Check the output
      ansible.builtin.fail:
        msg: "The container is unsharded"
      when: command_output.stdout == "unsharded"

    - name: Verify sharding is complete
      ansible.builtin.assert:
        that:
          - command_output.stdout == "sharded" or command_output.stdout == ""
        fail_msg: "Container sharding verification failed"
        success_msg: "Container is properly sharded"
